import React, { useState } from 'react';  // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç useState
import '../styles/EventsPage.css'

function EventsPage() {
  const [participants, setParticipants] = useState([
    { id: 1, name: '–ê–Ω–Ω–∞', tg: 'doll_nik' },
    { id: 2, name: '–ë–æ—Ä–∏—Å', tg: 'winner_one' },
  ]);
  const [newName, setNewName] = useState('');
  const [newTg, setNewTg] = useState('');  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ setNewTg
  const [results, setResults] = useState(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const addParticipant = () => {
    if (newName.trim() && newTg.trim()) {
      const newParticipant = {
        id: participants.length + 1,
        name: newName.trim(),
        tg: newTg.trim()
      };
      setParticipants([...participants, newParticipant]);
      setNewName('');
      setNewTg('');
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è: –∏–º—è –∏ Telegram.');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∂–µ—Ä–µ–±—å—ë–≤–∫–∏
  const startDraw = () => {
    if (participants.length < 3) {
      alert('–î–ª—è –∂–µ—Ä–µ–±—å—ë–≤–∫–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞');
      return;
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const shuffled = [...participants].sort(() => Math.random() - 0.5);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã, —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–∞–º–æ–≥–æ —Å–µ–±—è
    const pairs = participants.map((p, i) => {
      // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–º—è, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ —Ü–∏–∫–ª—É
      let toIndex = i;
      if (shuffled[i].id === p.id) {
        toIndex = (i + 1) % shuffled.length;
      }
      return {
        from: p.name,
        to: shuffled[toIndex].name
      };
    });

    setResults(pairs);
  };

  return (
    <div className="page">
      <header className="header">
        <h1>–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞</h1>
        <button onClick={() => window.location.href = '/'} className="home-btn">
          –ì–ª–∞–≤–Ω–∞—è
        </button>
      </header>

      <main className="content">
        <h2>–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h2>

        <div className="section">
          <h3>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</h3>
          <ul>
            {participants.map(p => (
              <li key={p.id}>{p.name} ({p.tg})</li>
            ))}
          </ul>
        </div>

        <div className="section">
          <h3>–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞:</h3>
          <div className="add-form">
            <input
              type="text"
              value={newName}
              onChange={(e) => setNewName(e.target.value)}
              placeholder="–ò–º—è"
            />
            <input
              type="text"  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å type="tg" –Ω–∞ type="text"
              value={newTg}
              onChange={(e) => setNewTg(e.target.value)}  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å setNewtg –Ω–∞ setNewTg
              placeholder="Telegram"
            />
            <button onClick={addParticipant}>–î–æ–±–∞–≤–∏—Ç—å</button>
          </div>
        </div>

        <div className="section">
          <button onClick={startDraw} disabled={participants.length < 3}>
            –ù–∞—á–∞—Ç—å –∂–µ—Ä–µ–±—å–µ–≤–∫—É
          </button>
        </div>

        {results && (
          <div className="section">
            <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>
            <ul>
              {results.map((pair, i) => (
                <li key={i}>{pair.from} ‚Üí {pair.to}</li>
              ))}
            </ul>
          </div>
        )}
      </main>

      <footer className="footer">
        <p>¬© 2025 –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. –°–¥–µ–ª–∞–Ω–æ —Å ‚ùÑ –∏ üéÅ</p>
      </footer>
    </div>
  );
}

export default EventsPage;
